class LinkedList<T> {
    private var length = 0
    private var head: Node<T>? = null
    private var tail: Node<T>? = null

    private inner class Node<T> constructor( var element: T,  var next: Node<T>?)


    fun add(element: T) {
        linkTail(element)
    }
    fun remove(element: T): Boolean {
        var curr = head
        while (curr != null) {
            if (curr.element == element) {
                unlink(curr)
                return true
            }
            curr = curr.next
        }
        return false
    }

    operator fun contains(element: T) = indexOf(element) != -1

    fun set(index: Int, element: T): T {
        validindex(index)
        val x = curnode(index)
        val curval = x.element
        x.element = element
        return curval
    }



     fun indexOf(element: T): Int {
        var index = 0
        var x = head
        while (x != null) {
            if (element == x.element)
                return index
            index++
            x = x.next
        }
        return -1
    }




    private fun linkTail(element: T) {
        val t = tail
        val newNode = Node<T>(element, null)
        tail = newNode
        if (t == null) {
            head = newNode
        }
        else {
            t.next = newNode
        }
        length++
    }

    private fun unlink(curr: Node<T>): T {
        val element = curr.element
        val next = curr.next
        val prev = getprev(curr)

        if (prev == null) {
            head = next
        }
        else {
            prev.next = next
            curr.next = null
        }

        if (next == null) {
            prev?.next = null
            tail = prev
        }
        else {
            prev?.next = next
            curr.next = null
        }

        length--
        return element
    }

    private fun getprev(node: Node<T>): Node<T>? {
        if (head != null && node == head) return null
        var curr = head
        while (curr != null) {
            if (curr.next == node) {
                return curr
            }
            curr = curr.next
        }
        return null
    }

    private fun curnode(index: Int): Node<T> {
        var x = head
        for (i in 0 until index) {
            x = x!!.next
        }
        return x!!
    }

    private fun validindex(index: Int) {
        if (index < 0 || index >= length)
            throw IndexOutOfBoundsException(outofrange(index))
    }


    private fun outofrange(index: Int): String {
        return " Your index: $index, Size: $length"
    }

    override fun toString(): String {
        var curr = head
        if (curr == null) return "[]"
        else {
            val sb = StringBuilder()
            sb.append('[')
            while (curr != null) {
                sb.append(curr.element)
                curr = curr.next
                if (curr?.element == null) {
                    sb.append(']')
                } else {
                    sb.append(", ")
                }
            }
            return sb.toString()
        }
    }
}


fun main(){
    val a = LinkedList<Int>()
    a.add(1)
    a.add(2)
    a.add(4)
    println(a)
    /*a.add()
    println(a)
    a.remove()
    println(a)
    a.set()
    println(a)
    a.set(2, 6)
    println(a)*/





    /*val b = a.contains()
    val c = a.contains()
    val o = a.indexOf(4)

    println(b)
    println(c)
    println(o)*/


}
